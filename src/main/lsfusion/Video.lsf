MODULE Video;

REQUIRE Config;

NAMESPACE Streamer;

CLASS Video 'Video files';
TABLE video(Video);

filename 'File Name' = DATA STRING (Video) CHARWIDTH 50;
path 'Folder containing the Video File' = DATA STRING (Video);
filelink 'Link to Video File' (Video v) = CONCAT '/', path(v), filename(v) MATERIALIZED CHARWIDTH 100; 

dateTime 'Uploaded' = DATA DATETIME (Video);

// Filename parsing at upload
filenameExt 'Extension at upload' = DATA STRING (Video) CHARWIDTH 5;
filenameConv 'File Name after conversion' = DATA STRING (Video) CHARWIDTH 50;
filelinkOut 'File Name without extension' (Video v) = CONCAT '/', flvPath(), filenameConv(v) CHARWIDTH 100;

// Flags for video conversion sequencing
toConvert 'Need to be converted into flv format' = DATA BOOLEAN (Video);
isConverted 'Converted into flv format' = DATA  BOOLEAN (Video);

// Aggregating flag
numberToConvert 'Videos under conversion' = GROUP SUM 1 IF toConvert(Video v) AND NOT isConverted(v);

// Keep Video record, if was not able to delete file from server
isHidden 'Keep files until removal from storage' = DATA BOOLEAN (Video);

// Uniqueness check for the Videos by its filenames
video = GROUP AGGR Video v BY filename(v);

WHEN SETCHANGED (filename(Video v)) DO {
    dateTime(v) <- currentDateTime();
}

cleanUpConvertedVideo 'Delete converted Video' (Video v) {
    IF NOT toConvert(v) THEN RETURN;
    fileExists(filelinkOut(v));
    IF fileExists() THEN {
        TRY {
            delete(filelink(v));
        }
        CATCH {
            MESSAGE 'Cannot delete file ' + filelink(v) + ':\n' + messageCaughtException();
        }
        fileExists(filelink(v));
        IF NOT fileExists() THEN {
            path(v) <- flvPath();
            filename(v) <- filenameConv(v);
        }
        toConvert(v) <- NULL;
        isConverted(v) <- TRUE;
    }
    ELSE {
        // Accumulate files with errors
        isConverted(v) <- NULL;
        toConvert(v) <- NULL;
    }
}

WHEN SET (isConverted(Video v)) DO {
    // cleanUpConvertedVideo(v);
    IF NOT toConvert(v) THEN RETURN;
    fileExists(filelinkOut(v));
    IF fileExists() THEN {
        path(v) <- flvPath();
        filename(v) <- filenameConv(v);
        toConvert(v) <- NULL;
        isConverted(v) <- TRUE;
    }
    ELSE {
        // Accumulate files with errors
        isConverted(v) <- NULL;
        toConvert(v) <- NULL;
    }
}

// Analyse uploaded files
checkUpload 'Check for new manually uploaded files' (STRING uploadPath) {
    TRY {
        checkDirectory(path(Folder.convert));
        NEWSESSION {
            LOCAL counter = INTEGER();
            LOCAL counterConvert = INTEGER();
            LOCAL absolutePath = STRING();
            LOCAL targetExtension = STRING();
            LOCAL filenameWithoutExtension = STRING();
            counter() <- 0;
            counterConvert() <- 0;
            targetExtension() <- '.flv';
            listFiles(uploadPath);
            FOR fileName(INTEGER r) AND NOT video(fileName(r)) AND NOT fileIsDirectory(r) NEW v = Video DO {
                filename(v) <- fileName(r);
                // Regular Expressions in LSFusion require masking of the symbol \
                filenameWithoutExtension() <- regexpReplace(filename(v),'\\.[^\\.]*$','','');
                // Extract extension of the uploaded file
                filenameExt(v) <- replace(filename(v),filenameWithoutExtension(),'');
                IF filenameExt(v) == targetExtension() THEN {
                    path(v) <- flvPath();
                    isConverted(v) <- TRUE;
                }
                ELSE {
                    path(v) <- convertPath();
                    filenameConv(v) <- filenameWithoutExtension() + targetExtension();
                    toConvert(v) <- TRUE;
                    counterConvert() <- counterConvert() + 1;
                }
                move((CONCAT '/', uploadPath, filename(v)), filelink(v));
                counter() <- counter() + 1;
            }
            IF counter() > 0 THEN
                MESSAGE 'Successfully added ' + counter() + ' new files.\nFiles to be converted: ' + counterConvert() + ' put into queue.';
            ELSE 
                MESSAGE 'No new uploaded files found.';
            APPLY;
        }
    }
    CATCH {
        MESSAGE 'Cannot read folder ' + uploadPath + ':\n' + messageCaughtException();
    }
}

checkManual 'Check for new manually uploaded files' () {
    checkUpload(manualPath());
}

// Auto upload
localFileName 'Name of the video on server' = DATA LOCAL STRING ();
FORM localFileNameDialog 'Provide name for the video file on this server'
    OBJECTS givenName = STRING PANEL 
    PROPERTIES localFileName = VALUE(givenName) BACKGROUND RGB (0,255,255)
;
DESIGN localFileNameDialog {
    size = (400,60);
    NEW pane FIRST {
        alignment = STRETCH; fill = 1;
        MOVE PROPERTY (localFileName) { alignment = STRETCH; caption = '';}
    }
}

uploadFile 'Upload a new video file' () {
    TRY {
        INPUT f = FILE DO {
            // @ToDo Get the original file name
            DIALOG localFileNameDialog OBJECTS givenName = localFileName() CHANGE DO {
                WRITE f TO autoPath() + '/' + localFileName();
                // Run the same routine as for files uploaded via scp
                checkUpload(autoPath());
            } ELSE {
                MESSAGE 'Name for the video file on the server is required';
            }
        } ELSE {
            MESSAGE 'File upload was cancelled';
        }
    } CATCH {
        MESSAGE 'Cannot upload file, contact Administrator.';
        printToLog('Auto file upload stopped with error: ' + messageCaughtException());
    }
}
