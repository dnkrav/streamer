MODULE Playlist;

REQUIRE Video;

NAMESPACE Streamer;

CLASS Playlist 'Playlist';
TABLE playlist(Playlist);

dateTime 'Created' = DATA DATETIME (Playlist) CHARWIDTH 20;
name 'Name' = DATA STRING[200] (Playlist) NONULL;
isGenerated 'ready' = DATA BOOLEAN (Playlist);
isRunning 'playing' = DATA BOOLEAN (Playlist);
path 'Path to generated playlist' = DATA STRING (Playlist);

playlist 'Playlist' = GROUP AGGR Playlist p BY name(p);

// Inserting video files into playlists
in 'in' = DATA BOOLEAN (Playlist,Video) CHARWIDTH 3;
order 'Order' = DATA INTEGER (Playlist,Video) CHARWIDTH 5;

playlist 'Playlist' (Playlist p) = GROUP CONCAT TEXT ('file \''+filelink(Video v)+'\''),'\n' 
    IF in(p,v) AND isConverted(v) AND NOT toConvert(v) ORDER order(p,v);
playlistPreview 'Playlist Preview' (Playlist p) = GROUP CONCAT TEXT ('file \''+filelink(Video v)+'\''),'\n' 
    IF in(p,v) ORDER order(p,v);
count 'Count Videos' (Playlist p) = GROUP SUM 1 IF in(p, Video v) CHARWIDTH 12;
count 'Count Playlists' (Video v) = GROUP SUM 1 IF in(Playlist p, v) CHARWIDTH 15;

// Generate Playlist file for ffmpeg concatenation
generate 'Generate Playlist' (Playlist p) {
    IF count(p) > 0 AND playlist(p) THEN {
        path(p) <- CONCAT '/',localStorage(),name(p)+'.list';
        stringToFile('ffconcat version 1.0\n' + playlist(p));
        WRITE resultFile() TO path(p);
        isGenerated(p) <- TRUE;
        // No APPLY here in order to prevent its nesting, because this function is being called from event
    }
    ELSE {
        MESSAGE 'No Videos selected for the Playlist ' + name(p);
    }
}

// Regenerate Playlist after each edition
WHEN SETDROPPED (in(Playlist p, Video v)) DO {
    dateTime(p) <- currentDateTime();
    generate(p);
}

// Regenerate Playlist after video conversion into target format
WHEN CHANGED (filelink(Video v)) DO {
    FOR in(Playlist p, v) DO {
        dateTime(p) <- currentDateTime();
        generate(p);
    }
}

deleteFile 'Delete file' (Video v) {
    NEWSESSION {
        FOR in(Playlist p,v) DO 
            in(p,v) <- NULL;
        isHidden(v) <- TRUE;
        TRY {
            delete(filelink(v));
            DELETE (v);
        }
        CATCH {
            MESSAGE 'Cannot delete file\n' + filelink(v) + '\nfrom the server:\n' + messageCaughtException();
        }
        APPLY;
    }
} CHARWIDTH 12;

// Aggregating flag
isRunning 'Some playlist is running' = GROUP LAST Playlist p IF isRunning(p) ORDER dateTime(p);

// Forms
showDelete 'Show deletion button' = DATA LOCAL BOOLEAN ();

FORM playlist 'Edit Playlist'
    OBJECTS p = Playlist PANEL 
    PROPERTIES (p) name, playlist, playlistPreview SHOWIF NOT (playlist(p) = playlistPreview(p))
    
    OBJECTS v = Video
    PROPERTIES(p,v) in,order
    PROPERTIES (v) READONLY dateTime, filename, toConvert, isConverted
    PROPERTIES TOOLBAR DRAW v uploadFile(), checkManual(), deleteFile(v) GRID SHOWIF showDelete()  
    FILTERS NOT isHidden(v)
    FILTERGROUP videos
        FILTER 'Show files in FLV format only' isConverted(v) DEFAULT
    
    PROPERTIES showDelete()
    EDIT Playlist OBJECT p
;

DESIGN playlist { 
    NEW pane FIRST {
        alignment = STRETCH;
        fill = 1;
        MOVE PROPERTY(name(p)) {alignment = STRETCH;} 
        NEW videos {
            type = CONTAINERH;
            fill = 1;
            MOVE BOX (v) {alignment = STRETCH; fill = 1; }
            NEW preview {
                width = 500;
                alignment = STRETCH;
                MOVE PROPERTY (playlistPreview(p)) {alignment = STRETCH; fill = 1; panelCaptionVertical = TRUE; }
                MOVE PROPERTY (playlist(p)) {alignment = STRETCH; fill = 1; panelCaptionVertical = TRUE; }
            }
        }
    }
    TOOLBAR {
        MOVE PROPERTY (showDelete());
    }
}

FORM playlists 'Playlists'
    OBJECTS p = Playlist
    PROPERTIES (p) READONLY isRunning, dateTime, name, count
    PROPERTIES (p) NEWSESSION NEW , EDIT , DELETE 
    
    OBJECTS v = Video
    PROPERTIES(p,v) order
    PROPERTIES (v) READONLY dateTime, filename
    FILTERS in(p,v) AND NOT isHidden(v)
    ORDERS order(p,v)
;
DESIGN playlists { 
    PROPERTY(isRunning(p)) {charWidth = 10; }
}

NAVIGATOR {
    NEW playlists FIRST;
}